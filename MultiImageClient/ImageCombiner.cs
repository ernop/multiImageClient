using System;
using System.Collections.Generic;
using System.Drawing.Text;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Timers;

namespace MultiImageClient
{
    internal class ImageCombiner
    {
        /// when combining images generated by multiple sources, if one fails, use this as the placeholder image width.
        private static int failWidth = 300;
        
        //internal void SaveMultipleImagesWithSubtitle(IEnumerable<Task> createdImages, Settings settings, string prompt)
        //{
        //    var fontForSubtitle = new Font("Arial", 24, FontStyle.Bold, GraphicsUnit.Pixel);
        //    var fontForPrompt = new Font("Arial", 24, FontStyle.Bold, GraphicsUnit.Pixel);

        //    int totalWidth = 0;
        //    var totalLoaded = createdImages.Where(el => el.IsCompleted == true && el.).Count();
        //    int maxImageHeight = 500;
        //    if (totalLoaded > 0) {
        //        maxImageHeight = createdImages.Where(el => el.IsSuccess == true).Max(el => el.Image.Height);
        //    }
        //    foreach (var (success, image, imageGenerator) in createdImages)
        //    {
        //        if (success)
        //        {
        //            totalWidth += image.Width;
        //        }
        //        else
        //        {
        //            //we should just put a blank box here with text on the bottom describing the error or whatever.
        //            totalWidth += failWidth;
        //        }                    
        //    }

        //    // Measure text height
        //    int subtitleHeight = 0;
        //    int promptHeight = 0;

        //    using (var measureBmp = new Bitmap(1, 1))
        //    using (var g = Graphics.FromImage(measureBmp))
        //    {
        //        g.TextRenderingHint = TextRenderingHint.AntiAliasGridFit;

        //        foreach (var (success, image, imageGenerator) in createdImages)
        //        {
        //            var size = g.MeasureString(imageGenerator.ToString(), fontForSubtitle);
        //            subtitleHeight = Math.Max(subtitleHeight, (int)Math.Ceiling(size.Height));
        //        }

        //        var promptSize = g.MeasureString(prompt, fontForPrompt);
        //        promptHeight = (int)Math.Ceiling(promptSize.Height);
        //    }

        //    int totalHeight = maxImageHeight + subtitleHeight + promptHeight;

        //    // Create the output bitmap
        //    using (var finalBmp = new Bitmap(totalWidth, totalHeight))
        //    using (var g = Graphics.FromImage(finalBmp))
        //    {
        //        g.Clear(Color.White);
        //        g.TextRenderingHint = TextRenderingHint.AntiAliasGridFit;

        //        int currentX = 0;
        //        foreach (var (success, image, imageGenerator) in createdImages)
        //        {
        //            var successText = "";
        //            var engineName = imageGenerator.ToString();
        //            var usingWidth = image?.Width ?? failWidth;

        //            if (success)
        //            {
        //                successText = $"ok {engineName}";
        //                g.DrawImage(image, currentX, 0, image.Width, image.Height);

        //            }
        //            else
        //            {
        //                successText = $"fail {engineName}";
        //            }
        //            var engineNameSize = g.MeasureString(successText, fontForSubtitle);
        //            var engineTextX = currentX + (usingWidth - (int)engineNameSize.Width) / 2;
        //            var engineTextY = maxImageHeight;

        //            g.DrawString(successText, fontForSubtitle, Brushes.Black, new PointF(engineTextX, engineTextY));

        //            if (success)
        //            {
        //                currentX += image.Width;
        //            }
        //            else
        //            {
        //                currentX += failWidth;
        //            }
        //        }

        //        int promptY = maxImageHeight + subtitleHeight;
        //        var promptSize = g.MeasureString(prompt, fontForPrompt);
        //        var promptX = (totalWidth - (int)promptSize.Width) / 2;
        //        g.DrawString(prompt, fontForPrompt, Brushes.Black, new PointF(promptX, promptY));

        //        // --- Simplified Filename Generation ---
        //        var safePromptPrefix = TextUtils.CleanPrompt(prompt);
        //        if (safePromptPrefix.Length > 50) // Ensure prefix isn't too long for filenames
        //        {
        //            safePromptPrefix = safePromptPrefix.Substring(0, 50);
        //        }
        //        // Remove invalid filename characters
        //        safePromptPrefix = string.Join("_", safePromptPrefix.Split(Path.GetInvalidFileNameChars()));

        //        var baseFilename = $"combined_{safePromptPrefix}";
        //        var outputPath = Path.Combine(settings.ImageDownloadBaseFolder, $"{baseFilename}.png");
        //        var ii = 1;
        //        // Ensure unique filename without overwriting
        //        while (File.Exists(outputPath))
        //        {
        //            ii++;
        //            outputPath = Path.Combine(settings.ImageDownloadBaseFolder, $"{baseFilename}_{ii}.png");
        //        }
        //        // --- End Simplified Filename Generation ---

        //        try
        //        {
        //            // Saving itself is synchronous with System.Drawing
        //            finalBmp.Save(outputPath, System.Drawing.Imaging.ImageFormat.Png);
        //            Console.WriteLine($"Combined image saved at: {outputPath}");
        //        }
        //        catch (Exception ex)
        //        {
        //            // Consider more specific logging or error handling
        //            Console.WriteLine($"Error saving combined image: {ex.Message}");
        //        }
        //    }

        //    // Dispose loaded images passed into the method
        //    foreach (var (success, image, imageGenerator) in createdImages)
        //    {
        //        image?.Dispose(); // Add null check for safety
        //    }

        //    // Dispose fonts
        //    fontForSubtitle?.Dispose(); // Add null check
        //    fontForPrompt?.Dispose();   // Add null check
        //}
    }
}
